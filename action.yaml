name: 'Mobile App Publishing'
description: 'Publishes the app to Expo for internal testing'

inputs:
  branch:
    description: 'What Expo branch to push to'
    required: false
  expo-token:
    description: 'The token for the expo account being published to'
    required: true
  message:
    description: 'What message to include on the update'
    required: false
  suffix:
    description: 'A version suffix to append to the end of the version'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Expo login
      uses: expo/expo-github-action@v7
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ inputs.expo-token }}

    - name: Update version number # Set the version number to include a for internal verification
      if: ${{ inputs.suffix }} != ''
      run: |
        if [ -f "app.json" ]; then
          jq -r --arg VERSION "$(jq -r '.expo.version' < app.json)-${{ inputs.suffix }}" '.expo.version=$VERSION' < app.json > app2.json && cp app2.json app.json && rm app2.json
        elif [ -f "app.config.ts" ]; then
          sed -i app.config.ts -E -e 's|version:[ \t]+(["'\''])([0-9]+(\.[0-9]+)*)["'\'']|version: \1\2-'"${{ inputs.suffix }}"'\1|g'
        elif [ -f "app.config.js" ]; then
          sed -i app.config.js -E -e 's|version:[ \t]+(["'\''])([0-9]+(\.[0-9]+)*)["'\'']|version: \1\2-'"${{ inputs.suffix }}"'\1|g'
        fi
      shell: bash

    - name: Get branch name
      id: get_ref
      uses: dmsi-io/gha-get-ref@main
      with:
        custom_ref: ${{ inputs.branch }}

    - name: Create branch if it doesn't exist
      run: eas branch:create "${{ steps.get_ref.outputs.ref_name }}"
      # This errors if trying to create a branch that already exists
      continue-on-error: true
      shell: bash

    - name: Publish
      run: |
        if [ -n "${{ inputs.message }}" ]; then
          eas update --branch="${{ steps.get_ref.outputs.ref_name }}" --message="${{ inputs.message }}"
        else
          eas update --branch="${{ steps.get_ref.outputs.ref_name }}" --message="$(git log -1 --pretty=%s)"
        fi
      shell: bash
